Name: {{name}}
Version: {{version}}
Release: {{release}}
Summary: %{name}
License: {{license}}

BuildArch: noarch
Source: %{name}-%{version}.tar.gz

%{?systemd_requires}
Requires: nodejs
{{#spec.requires}}
Requires: {{.}}
{{/spec.requires}}
BuildRequires: nodejs
{{#spec.buildRequires}}
BuildRequires: {{.}}
{{/spec.buildRequires}}

AutoReqProv: no

%global __os_install_post %{nil}
%define debug_package %{nil}
%define username {{spec.username}}
%define groupname {{spec.groupname}}

%description
{{description}}


%prep
%setup -q -c

%build
npm prune --production
npm rebuild


%install
mkdir -p %{buildroot}/var/www/%{name}
mkdir -p %{buildroot}/var/log/%{name}

mkdir -p %{buildroot}%{_unitdir}
mkdir -p %{buildroot}/lib/systemd/system-preset

cp -r ./* %{buildroot}/var/www/%{name}


cat << EOF > %{buildroot}%{_unitdir}/%{name}.service
[Unit]
Description=%{name}
After=network.target

[Service]
ExecStart=/usr/bin/npm start
WorkingDirectory=/var/www/%{name}
Restart=always
RestartSec=3
User=%{username}
Group=%{groupname}

{{#each spec.environment}}
Environment={{@key}}={{this}}
{{/each}}

[Install]
WantedBy=multi-user.target
EOF

cat << EOF > %{buildroot}/lib/systemd/system-preset/50-%{name}.preset
enable %{name}.service
EOF


%pre
getent group %{groupname} >/dev/null || {
    groupadd -r %{groupname}
}
getent passwd %{username} >/dev/null || {
    useradd -r -g %{groupname} -d /var/www/%{name} -m -s /sbin/nologin -c "%{name} service" %{username}
}
{{#spec.pre}}
{{{.}}}
{{/spec.pre}}

%post
%systemd_post %{name}.service
{{#spec.post}}
{{{.}}}
{{/spec.post}}

%preun
%systemd_preun %{name}.service
{{#spec.preun}}
{{{.}}}
{{/spec.preun}}

%postun
%systemd_postun_with_restart %{name}.service
{{#spec.postun}}
{{{.}}}
{{/spec.postun}}


%files
%defattr(644, %{username}, %{groupname}, 755)
/var/www/%{name}
/var/log/%{name}

%attr(644,root,root) %{_unitdir}/%{name}.service
%attr(644,root,root) /lib/systemd/system-preset/50-%{name}.preset

{{#spec.executable}}
%defattr(755, %{username}, %{groupname}, 755)
{{.}}
{{/spec.executable}}
